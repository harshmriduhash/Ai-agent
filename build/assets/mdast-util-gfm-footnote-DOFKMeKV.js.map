{"version":3,"file":"mdast-util-gfm-footnote-DOFKMeKV.js","sources":["../../node_modules/mdast-util-gfm-footnote/lib/index.js"],"sourcesContent":["/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n"],"names":["footnoteReference","footnoteReferencePeek","enterFootnoteCallString","enterFootnoteCall","token","enterFootnoteDefinitionLabelString","enterFootnoteDefinition","exitFootnoteCallString","label","node","assert","normalizeIdentifier","exitFootnoteCall","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","_","state","info","tracker","value","exit","subexit","gfmFootnoteFromMarkdown","gfmFootnoteToMarkdown","options","firstLineBlank","footnoteDefinition","mapAll","mapExceptFirst","line","index","blank"],"mappings":"+GAkBAA,EAAkB,KAAOC,EAMzB,SAASC,GAA0B,CACjC,KAAK,OAAM,CACb,CAMA,SAASC,EAAkBC,EAAO,CAChC,KAAK,MAAM,CAAC,KAAM,oBAAqB,WAAY,GAAI,MAAO,EAAE,EAAGA,CAAK,CAC1E,CAMA,SAASC,GAAqC,CAC5C,KAAK,OAAM,CACb,CAMA,SAASC,EAAwBF,EAAO,CACtC,KAAK,MACH,CAAC,KAAM,qBAAsB,WAAY,GAAI,MAAO,GAAI,SAAU,EAAE,EACpEA,CACJ,CACA,CAMA,SAASG,EAAuBH,EAAO,CACrC,MAAMI,EAAQ,KAAK,OAAM,EACnBC,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CC,EAAOD,EAAK,OAAS,mBAAmB,EACxCA,EAAK,WAAaE,EAChB,KAAK,eAAeP,CAAK,CAC7B,EAAI,YAAW,EACbK,EAAK,MAAQD,CACf,CAMA,SAASI,EAAiBR,EAAO,CAC/B,KAAK,KAAKA,CAAK,CACjB,CAMA,SAASS,EAAkCT,EAAO,CAChD,MAAMI,EAAQ,KAAK,OAAM,EACnBC,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CC,EAAOD,EAAK,OAAS,oBAAoB,EACzCA,EAAK,WAAaE,EAChB,KAAK,eAAeP,CAAK,CAC7B,EAAI,YAAW,EACbK,EAAK,MAAQD,CACf,CAMA,SAASM,EAAuBV,EAAO,CACrC,KAAK,KAAKA,CAAK,CACjB,CAGA,SAASH,GAAwB,CAC/B,MAAO,GACT,CAMA,SAASD,EAAkBS,EAAMM,EAAGC,EAAOC,EAAM,CAC/C,MAAMC,EAAUF,EAAM,cAAcC,CAAI,EACxC,IAAIE,EAAQD,EAAQ,KAAK,IAAI,EAC7B,MAAME,EAAOJ,EAAM,MAAM,mBAAmB,EACtCK,EAAUL,EAAM,MAAM,WAAW,EACvC,OAAAG,GAASD,EAAQ,KACfF,EAAM,KAAKA,EAAM,cAAcP,CAAI,EAAG,CAAC,MAAO,IAAK,OAAQU,CAAK,CAAC,CACrE,EACEE,EAAO,EACPD,EAAI,EACJD,GAASD,EAAQ,KAAK,GAAG,EAClBC,CACT,CASO,SAASG,GAA0B,CACxC,MAAO,CACL,MAAO,CACL,sBAAuBpB,EACvB,gBAAiBC,EACjB,iCAAkCE,EAClC,sBAAuBC,CACxB,EACD,KAAM,CACJ,sBAAuBC,EACvB,gBAAiBK,EACjB,iCAAkCC,EAClC,sBAAuBC,CAC7B,CACA,CACA,CAWO,SAASS,EAAsBC,EAAS,CAE7C,IAAIC,EAAiB,GAErB,OAAID,GAAWA,EAAQ,iBACrBC,EAAiB,IAGZ,CACL,SAAU,CAAC,mBAAAC,EAAoB,kBAAA1B,CAAiB,EAEhD,OAAQ,CAAC,CAAC,UAAW,IAAK,YAAa,CAAC,QAAS,WAAY,WAAW,CAAC,CAAC,CAC9E,EAME,SAAS0B,EAAmBjB,EAAMM,EAAGC,EAAOC,EAAM,CAChD,MAAMC,EAAUF,EAAM,cAAcC,CAAI,EACxC,IAAIE,EAAQD,EAAQ,KAAK,IAAI,EAC7B,MAAME,EAAOJ,EAAM,MAAM,oBAAoB,EACvCK,EAAUL,EAAM,MAAM,OAAO,EACnC,OAAAG,GAASD,EAAQ,KACfF,EAAM,KAAKA,EAAM,cAAcP,CAAI,EAAG,CAAC,OAAQU,EAAO,MAAO,GAAG,CAAC,CACvE,EACIE,EAAO,EAEPF,GAASD,EAAQ,KAAK,IAAI,EAEtBT,EAAK,UAAYA,EAAK,SAAS,OAAS,IAC1CS,EAAQ,MAAM,CAAC,EAEfC,GAASD,EAAQ,MACdO,EAAiB;AAAA,EAAO,KACvBT,EAAM,YACJA,EAAM,cAAcP,EAAMS,EAAQ,QAAO,CAAE,EAC3CO,EAAiBE,EAASC,CACtC,CACA,GAGIR,EAAI,EAEGD,CACX,CACA,CAGA,SAASS,EAAeC,EAAMC,EAAOC,EAAO,CAC1C,OAAOD,IAAU,EAAID,EAAOF,EAAOE,EAAMC,EAAOC,CAAK,CACvD,CAGA,SAASJ,EAAOE,EAAMC,EAAOC,EAAO,CAClC,OAAQA,EAAQ,GAAK,QAAUF,CACjC","x_google_ignoreList":[0]}